@page "/verifyauth"
@using Microsoft.AspNetCore.Components.Forms
@inject IProductEndpoint Produtcs

<h3>VerifyAuth</h3>
@if (isAuthenticated)
{
    <h4>@userName is authenticaded.</h4>
    <ul>
        <li>Access to admin role: @isAdminUser</li>
        <li>Access to cashier role: @isCashier</li>
        <li>Access to manager role: @isManager</li>
    </ul>
}
else
{
    <h4>the user is not authencitated</h4>
}
<div>
    <p>
        <label>
            <code>yyyy-MM-dd</code> format:
            <input type="date" @bind="startDate" @bind:format="yyyy-MM-dd" />
        </label>
    </p>
    <p>
        <label>
            godzina:
            <input type="time" @bind="startDate" />
        </label>
    </p>
    <p>
        <code>startDate</code>: @startDate
    </p>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private bool isAuthenticated = false;
    private string userName;
    private bool isAdminUser = false;
    private bool isCashier = false;
    private bool isManager = false;
    private DateTime startDate = new(2022, 1, 1);
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            isAuthenticated = true;
            try
            {
                List<ProductModel> data = await Produtcs.GetAll();
                foreach (var p in data)
                {
                    Console.WriteLine(p.Description);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            userName = authState.User.FindFirst(ClaimTypes.Name).Value;
            isAdminUser = authState.User.IsInRole("Admin");
            isCashier = authState.User.IsInRole("Cashier");
            isManager = authState.User.IsInRole("Manager");
        }
    }
}
